45-What is a collection?
A collection is a group of objects that are treated as a single unit. It provides a way to organize and manage
similar or related data elements.
Key Points:
Collections offer a structured way to store and manipulate data.
They come in various types like lists (ordered elements), sets (unique elements), and maps (key-value pairs).
The Java Collections Framework provides a rich set of classes and interfaces to work with collections efficiently.
Benefits:
Improved data organization and retrieval.
Easier to manage large sets of data.
Facilitates operations like adding, removing, searching, and sorting elements.
In short, collections are a fundamental building block for managing and manipulating sets of data in Java programs.

46-Is it possible to organize a collection from basic elements types?
Absolutely possible to organize a collection from basic element types in Java. While the Java Collections Framework
provides various pre-defined collection types (like List, Set, and Map), you can achieve a similar structure using basic
elements like arrays and custom classes.
*Using Arrays:
Arrays are the most basic way to store a collection of elements of the same type.
They hold a fixed size of elements in a contiguous memory location.
You can create an array of a primitive type (e.g., int[] numbers) or an array of objects.
*Creating Custom Classes:
You can define your own class to represent an element in your collection.
This class can hold various attributes and methods to manage the data.
To organize multiple instances of this custom class, you can create an array of your custom class objects.
*Implementing Your Own Collection Logic:
While arrays offer basic organization, they lack some functionalities of built-in collections like adding or
removing elements dynamically. To achieve a more flexible collection structure, you can:
Create a custom class that holds an array of elements internally.
Implement methods for adding, removing, searching, and iterating through the elements.

47-What is autoboxing and what is unboxing?
Autoboxing and Unboxing are convenience features that simplify working with primitive data types and their
corresponding wrapper classes.
*Autoboxing:
Automatic conversion of a primitive value (e.g., int, double) to its corresponding wrapper class object (e.g., Integer, Double).
Happens implicitly by the Java compiler.
Makes it easier to use primitive types in contexts that require objects, like collections or method arguments that
expect wrapper classes.
*Unboxing:
The opposite of autoboxing.
Conversion of a wrapper class object back to its corresponding primitive value.
Also happens implicitly by the Java compiler when necessary.
Allows using wrapper class objects in contexts that expect primitive types.
*Benefits:
Autoboxing and unboxing improve code readability by allowing you to use primitive types and wrapper classes interchangeably
in certain situations.
They simplify collection usage and method calls that might otherwise require explicit conversions.

48-Name the interfaces and sub-interfaces of the collection.
In short, the Collection interface serves as the foundation, and Set, List, and Map are specialized interfaces with their
own characteristics and sub-interfaces for further categorization.
Sub-Interfaces:
Set:
Represents a collection of unique elements.
No duplicates allowed.
Sub-interfaces:
SortedSet: Orders the elements in a specific order (ascending or descending).
List:
Represents an ordered collection of elements.
Duplicates are allowed.
Sub-interfaces:
Deque: Supports adding and removing elements from both ends (front and back).
ListIterator: Provides bidirectional navigation and element modification within a list.
Map:
Represents a collection of key-value pairs.
Keys must be unique, values can be duplicated.
Sub-interfaces:
SortedMap: Orders the keys in a specific order.

49-What defines the Iterable interface?
Iterable interface is a fundamental building block for collections.
Purpose:
Defines a marker interface that signifies a collection can be iterated over.
Enables the use of the for-each loop (enhanced for loop) to iterate through the elements in a collection.
Functionality:
It doesn't specify any methods for adding, removing, or manipulating elements.
It has a single abstract method: iterator().
This iterator() method returns an Iterator object, which provides methods for traversing the collection element by element.
Benefits:
Promotes code readability and maintainability by allowing a clean syntax for iterating through collections using the for-each loop.
Decouples the iteration logic from the specific collection implementation.
// Iterate using for-each loop (implicitly uses iterator)
for (Student student : students) {
  System.out.println(student.name + ", " + student.age);
}
Key Point:
Most collection classes in the Java Collections Framework (like ArrayList, HashSet, HashMap) implement the Iterable interface,
allowing you to use the for-each loop with them.
Iterable interface provides a standardized way to iterate through various collection types in Java, simplifying code
and promoting consistency.

50-What methods does the Iterator<E> interface have?
The Iterator<E> interface in Java defines several methods for iterating over a collection's elements.
Key methods:
*hasNext(): This method checks if there are any more elements remaining in the iteration.
It returns true if there's at least one element left, false otherwise.
*next(): This method retrieves the next element in the iteration. It throws a NoSuchElementException if
there are no more elements available.
Optional Methods:
*remove(): This method allows removing the element that was most recently returned by next().
However, the behavior of this method and the supported removal scenarios might vary depending on the collection implementation.
It's generally recommended to use the collection's specific removal methods for better control.
List<String> names = new ArrayList<>();
names.add("Alice");
names.add("Bob");
names.add("Charlie");

Iterator<String> iterator = names.iterator();

while (iterator.hasNext()) {
  String name = iterator.next();
  System.out.println(name);
}

51-How does the advanced for loop work?
for (elementType elementName : collection) {
  // Code to be executed for each element
}
elementType: This specifies the type of elements;
elementName: This is a temporary variable that holds each element during the iteration;
collection: collection to iterate over (e.g., List, Set, Map);
Behind the Scenes:
The compiler internally converts the advanced for loop into a traditional for loop that uses an Iterator object.
The Iterator object retrieved from the collection is used to access elements one by one.
Benefits:
Improved code readability compared to traditional for loops, especially when dealing with complex collection structures.
Focuses on the element itself, promoting cleaner syntax.
No need to explicitly manage loop counters or index variables.
Key Points:
The advanced for loop is primarily designed for iteration, not modification. If you need to modify elements within the
loop, consider using a traditional for loop with an index or the iterator.remove() method (cautiously).
The advanced for loop works with collections that implement the Iterable interface, which is most common
in the Java Collections Framework.

52-What is the difference between cycle and advanced cycle?
Interpretation is that "cycle" refers to a loop in Java. There's no built-in "advanced cycle" concept, but Java offers
several loop constructs:
*for loop: This is a general-purpose loop with a counter variable and conditions for initialization, continuation,
 and increment/decrement.
*while loop: This loop continues as long as a specific condition remains true.
*do-while loop: This loop executes the body at least once, then continues as long as a condition is true.
*for-each loop (advanced for loop): This loop iterates through elements in a collection using an iterator.

53-What are List<E>, Set<E>, Queue<E>?
    List<E>:
Represents an ordered collection of elements.
Elements can be accessed by their position (index) in the list.
Duplicates are allowed.
Common implementations include ArrayList (dynamically resizable) and LinkedList (efficient for insertions/removals at
the beginning or middle).
    Set<E>:
Represents a collection of unique elements.
No duplicates are allowed.
Ordering is not maintained (iteration order might not reflect element insertion order).
Common implementations include HashSet (fast average performance, but not ordered) and TreeSet (sorted set based on
natural ordering or a custom comparator).
    Queue<E>:
Represents a collection that follows a First-In-First-Out (FIFO) principle.
Elements are added at the back (enqueue) and removed from the front (dequeue).
Common implementations include LinkedList (can be used as both a list and a queue) and PriorityQueue
(elements are ordered based on a natural ordering or a custom comparator).

In short, List<E>, Set<E>, and Queue<E> are fundamental collection interfaces in Java that provide structured ways to organize
and manage element data based on specific requirement

54-How is the Map<K,V> interface organized?
Map<K, V> interface in Java defines a collection that stores key-value pairs.
Keys must be unique and act as identifiers for the associated values.
Values can be duplicated.
The interface provides methods for adding, removing, searching, and iterating over key-value pairs.
Key Methods:
put(K key, V value): Adds a key-value pair to the map. If the key already exists, it replaces the existing value.
get(K key): Retrieves the value associated with a specific key. Returns null if the key is not found.
containsKey(K key): Checks if the map contains a specific key.
remove(K key): Removes the key-value pair associated with a key.
size(): Returns the number of key-value pairs in the map.

*HashMap: This is the most common implementation, offering fast average performance for basic operations.
It uses a hash table for efficient key lookups.
*TreeMap: This implementation keeps the keys sorted according to their natural ordering or a custom comparator.
It provides efficient retrieval for sorted keys but might have slower insertion/removal compared to HashMap for large datasets.
*LinkedHashMap: This implementation maintains the insertion order of key-value pairs, making it useful when preserving
the order of elements is important.

55-What sub-interfaces does the List<E> interface have?
Deque<E> (Double Ended Queue): This sub-interface extends List<E> and adds functionalities for adding and removing
elements from both ends of the list (front and back).
LinkedList: This implementation of both List<E> and Deque<E> provides efficient insertions and removals at the
beginning or middle of the list. It's less efficient for random access by index compared to ArrayList.
Key Methods of Deque (in addition to List methods):
addFirst(E e): Adds an element at the beginning of the deque.
addLast(E e): Adds an element at the end of the deque.
offerFirst(E e): Attempts to add an element at the beginning of the deque. Returns true if successful, false otherwise
(unlike addFirst which throws an exception on failure).
offerLast(E e): Attempts to add an element at the end of the deque. Returns true if successful, false otherwise
(unlike addLast which throws an exception on failure).
pollFirst(): Retrieves and removes the first element from the deque, or returns null if empty.
pollLast(): Retrieves and removes the last element from the deque, or returns null if empty.
peekFirst(): Retrieves, but does not remove, the first element from the deque, or returns null if empty.
peekLast(): Retrieves, but does not remove, the last element from the deque, or returns null if empty.
In short, the Deque<E> sub-interface of List<E> adds functionalities specific to managing elements at both ends of an
ordered collection, making it useful for scenarios requiring efficient insertions and removals at the beginning or the end.

56-What classes of implementations does the List<E> interface have?
List<E> interface is primarily used to represent an ordered collection of elements where duplicates are allowed
and elements can be accessed by their index.
Implementations or classes related to the List interface in Java: ArrayList, LinkedList, Vector, and Stack;

57-How to declare and initialize a list?
Here are three common methods:
1)Using an interface and an implementation class:
// Declare a List of Strings
List<String> names;
// Initialize the list with an ArrayList implementation
names = new ArrayList<>();
2)Using a specific implementation class:
// Directly declare and initialize an ArrayList of Strings
ArrayList<String> names = new ArrayList<>();
3)Using Java 9 or later features (diamond operator):
// Declare and initialize a List of Strings using a diamond operator (Java 9+)
List<String> names = new ArrayList<>();

58-What are ArrayList and Vector? What is the difference between them?
    -Similarities:
Both ArrayList and Vector are used to represent ordered collections of elements.
They allow adding, removing, accessing, and iterating over elements.
Both implement the List interface and provide similar functionalities for basic list operations.
    -Differences:
*Thread Safety:
ArrayList: Not thread-safe. Concurrent access from multiple threads without proper synchronization can lead to data
inconsistencies.
Vector: Thread-safe. All methods in Vector are synchronized, making it suitable for multithreaded environments.
However, this synchronization overhead can impact performance.
*Initial Capacity and Growth:
ArrayList: By default, it starts with an initial capacity of 10 and grows dynamically by 50% of its current size when needed.
Vector: Starts with an initial capacity of 10 and doubles its size when it needs to grow. This can lead to more
frequent memory allocations compared to ArrayList.
*Legacy Status:
ArrayList: More modern and widely used collection class.
Vector: Considered a legacy class. While still functional, it's generally recommended to use ArrayList for new
development due to its better performance and non-synchronized nature (if thread safety is not a concern).

59-How to create an ArrayList?
1)Using Interface and Implementation Class:
// Declare a List of Strings
List<String> names;
// Initialize the list with an ArrayList implementation
names = new ArrayList<>();
2)Directly Declaring and Initializing with ArrayList:
// Directly declare and initialize an ArrayList of Strings
ArrayList<String> names = new ArrayList<>();
3)Using Diamond Operator (Java 9 and later):
// Declare and initialize a List of Strings using a diamond operator (Java 9+)
List<String> names = new ArrayList<>();
Choosing the right approach:
If you need flexibility and might want to switch implementations later, using the interface and a separate implementation
  class might be better.
For simple cases where you know you'll be using ArrayList, directly declaring and initializing it is more concise.
The diamond operator (Java 9+) offers a clean way to declare and initialize while inferring the generic type.

60-How to organize a loop in an ArrayList?
Two main ways to organize a loop for iterating over elements in an ArrayList in Java:
1)Traditional for loop with index:
// Loop through the ArrayList using index
for (int i = 0; i < names.size(); i++) {
  String name = names.get(i);
  System.out.println(name);
}
This approach uses a for loop that iterates based on the index of each element in the ArrayList.
2)Enhanced for loop (for-each loop):
// Loop through the ArrayList using for-each loop
for (String name : names) {
  System.out.println(name);
}
This loop provides a more concise syntax for iterating over the elements themselves, without explicitly managing the index.

61-How to remove objects from a collection or from an ArrayList?
1)Using the remove(Object o) method:
This method removes the first occurrence of a specific object (o) from the collection.
It returns true if an element is removed, false otherwise (if the object wasn't found).
boolean isRemoved = names.remove("Bob"); // Removes the first "Bob"
2)Using the remove(int index) method:
This method removes the element at a specific index (index) from the collection.
It shifts any subsequent elements to the left, effectively closing the gap created by the removal.
This method throws an IndexOutOfBoundsException if the index is invalid (less than 0 or greater than or equal
to the collection size).
names.remove(1); // Removes the element at index 1 ("Bob")
3)Using the Iterator.remove() method (cautiously):
This approach involves obtaining an iterator from the collection using the iterator() method.
While iterating through the collection using the iterator's hasNext() and next() methods, you can call iterator.remove()
to remove the element you just retrieved.
Iterator<String> iterator = names.iterator();
while (iterator.hasNext()) {
  String name = iterator.next();
  if (name.equals("Bob")) {
    iterator.remove(); // Removes "Bob" from the list during iteration
  }
}
Important points regarding Iterator.remove():
This method should be used cautiously, especially when modifying the collection structure during iteration.
Unexpected behavior might occur if you're not careful.
It's generally recommended to avoid modifying the collection structure (removing elements) while iterating with a for-each loop.
Choosing the right approach:
Use remove(Object o) if you want to remove the first occurrence of a specific object based on its content.
Use remove(int index) if you know the exact position (index) of the element you want to remove.
Avoid modifying the collection structure (using Iterator.remove()) during iteration with a for-each loop.
If modification is necessary, consider using a traditional for loop with an index or a different approach altogether.

62-What is the difference between ArrayList and LinkedList?
Underlying Data Structure:
ArrayList: Uses an array to store elements. Elements are stored contiguously in memory, with each element having a fixed index.
LinkedList: Uses a linked list data structure. Elements are not stored contiguously in memory. Each element contains a
reference (link) to the next element in the list and optionally the previous element.

Impact on Performance:
    Random Access:
*ArrayList: excels at random access. Accessing elements by index is very efficient (O(1) time complexity) as you can
directly jump to the element's location in the array.
*LinkedList:  less efficient for random access (O(n) time complexity in the worst case) because it might need to traverse
the list from the beginning to find the element at a specific index.
    Insertion and Removal:
*ArrayList:  adding or removing elements in the middle of the list is expensive (O(n) time complexity) because elements
need to be shifted to accommodate the change.
*LinkedList: excels at insertions and removals, especially at the beginning or end of the list (O(1) time complexity).
This is because you only need to modify the links between elements without shifting a large portion of the data.
    Memory Usage:
*ArrayList:  generally has lower memory overhead compared to LinkedList because it doesn't require storing extra references
for the next and previous elements.
*LinkedList:  might have slightly higher memory usage due to the additional references each element holds for the next
and previous elements in the list.
    Choosing the Right Collection:
*Use ArrayList:  when you need fast random access and don't perform frequent insertions/removals in the middle of the list.
It's a good choice for storing and retrieving data by index frequently.
*Use LinkedList:  when you need efficient insertions/removals, especially at the beginning or end of the list.
It's suitable for scenarios where the order of elements matters, and you frequently add or remove elements from the list.
Table summarizing the key points:

Feature	                ArrayList	                                        LinkedList
Data Structure	        Array	                                            Linked List
Random Access	        Efficient (O(1))	                                Less efficient (O(n) in worst case)
Insertion/Removal	    Expensive in the middle (O(n))	                    Efficient (O(1) at beginning/end)
Memory Usage	        Lower overhead	                                    Slightly higher overhead due to element references
Use Cases	            Frequent random access, infrequent modifications	Frequent insertions/removals, maintaining order

63-How is the Stack<E> interface organized?
Functionality:
Represents a Last-In-First-Out (LIFO) data structure.
Elements are added (pushed) onto the top of the stack and removed (popped) from the top.
It provides methods for adding, removing, checking for emptiness, and peeking at the top element.
Methods:
push(E element): Adds an element to the top of the stack.
pop(): Removes and returns the element from the top of the stack. Throws an exception if the stack is empty.
peek(): Returns the element at the top of the stack without removing it. Returns null if the stack is empty.
isEmpty(): Checks if the stack is empty.
The most common implementation for Stack uses an ArrayList internally. This leverages the efficient random access of
ArrayList for pushing and popping elements, which are essentially adding/removing from the end.
Benefits:
Stacks offer a simple LIFO principle for managing data.
They are useful for scenarios like function call stacks, implementing undo/redo functionality, or evaluating expressions
in reverse Polish notation (postfix notation).
Important Note:
While Stack is a useful concept, be aware that the Java Collections Framework offers alternative functionalities
like Deque<E> which provides both LIFO (using pop()) and FIFO (First-In-First-Out) behavior (using pollFirst()).
You might be able to achieve similar results using Deque depending on your specific needs.